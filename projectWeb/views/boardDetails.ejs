<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Board Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
        integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
        crossorigin="anonymous"></script>
        <link rel="icon" type="image/x-icon" href="/pic/apple-touch-icon.png"/>
        <link rel="stylesheet" href="/css/styleDetail.css" />

</head>

<body>
    <div class="container mt-4">
        <h1>Board Details</h1>
        <div class="backTo">
            <a href="/" class="btn btn-primary">Back to Dash Board</a>
        </div>
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <%= board.nameboard %>
                </h5>
                <p class="card-text">Token: <%= board.token %>
                </p>
                <p class="card-text">
                    Default Temp:
                    <% if (board.temp_default) { %>
                        <%= board.temp_default.min %> - <%= board.temp_default.max %> °C
                                <% } else { %>
                                    Not Set
                                    <% } %>
                </p>
                <p id="temp-display-<%= board.token %>">Temp: <%= board.temp %> °C</p>
                <p class="card-text">pH: <%= board.ph %>
                </p>

                <!-- Change Setting Button -->
                <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                    data-bs-target="#changeSettingModal">
                    Change Setting
                </button>

                <!-- Modal for Changing Settings -->
                <div class="modal fade" id="changeSettingModal" tabindex="-1" aria-labelledby="changeSettingModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="changeSettingModalLabel">Change Temperature Settings</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                    aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="changeSettingForm">
                                    <input type="hidden" name="token" value="<%= board.token %>">
                                    <div class="mb-3">
                                        <label for="temp" class="form-label">Temperature (°C)</label>
                                        <!-- แสดงอุณหภูมิปัจจุบันในฟิลด์อินพุต -->
                                        <input type="number" id="temp" name="temp" class="form-control"
                                            value="<%= board.temp %>" required>
                                    </div>
                                    <button type="submit" class="btn btn-primary">Save Changes</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Graph Area -->
                <div class="container mt-4">
                    <h2>Temperature Data</h2>
                    <canvas id="temperatureChart" width="50%" height="20px"></canvas>
                </div>

                <h2>Hourly Data</h2>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Temp (°C)</th>
                            <th>pH</th>
                        </tr>
                    </thead>
                    <tbody id="data-table-body">
                        <!-- Data rows will be inserted here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('changeSettingForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const formData = new FormData(this);
            const token = formData.get('token');
            const temp = formData.get('temp');

            fetch('/updateTemp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ token, temp })
            })
                .then(response => {
                    if (response.ok) {
                        alert('Temperature updated successfully!');
                        document.getElementById('temp-display-' + token).textContent = 'Temp: ' + temp + ' °C';
                        const modal = bootstrap.Modal.getInstance(document.getElementById('changeSettingModal'));
                        modal.hide();
                    } else {
                        alert('Failed to update temperature');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to update temperature');
                });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Sample data - Replace this with dynamic data if needed
            const data = {
                labels: [
                    '00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00',
                    '09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00',
                    '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'
                ],
                datasets: [{
                    label: 'Temperature (°C)',
                    data: [
                        24, 23.5, 23, 22.5, 22, 21.5, 21, 22, 23, 24,
                        25, 26, 27, 28, 29, 30, 29.5, 28, 27, 26,
                        25, 24, 23.5, 23
                    ],
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    fill: true,
                    tension: 0.1
                }]
            };

            const config = {
                type: 'line',
                data: data,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return context.dataset.label + ': ' + context.raw + ' °C';
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Time'
                            },
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Temperature (°C)'
                            },
                            beginAtZero: true
                        }
                    }
                }
            };

            const ctx = document.getElementById('temperatureChart').getContext('2d');
            new Chart(ctx, config);
        });
    </script>

    <!-- <script>
        // Assuming data is fetched from the server
        const fetchData = async () => {
            try {
                const response = await fetch('/api/boarddata?date=2024-09-05');
                const data = await response.json();

                // Populate table
                const tableBody = document.getElementById('data-table-body');
                data.forEach(row => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                    <td>${row.date}</td>
                    <td>${row.hour}:00</td>
                    <td>${row.avg_temp}</td>
                    <td>${row.avg_ph}</td>
                `;
                    tableBody.appendChild(tr);
                });

                // Populate chart
                const ctx = document.getElementById('data-chart').getContext('2d');
                const chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.map(row => `${row.hour}:00`),
                        datasets: [
                            {
                                label: 'Temperature (°C)',
                                data: data.map(row => row.avg_temp),
                                borderColor: 'rgba(255, 99, 132, 1)',
                                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                fill: false,
                            },
                            {
                                label: 'pH',
                                data: data.map(row => row.avg_ph),
                                borderColor: 'rgba(54, 162, 235, 1)',
                                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                fill: false,
                            }
                        ]
                    },
                    options: {
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();
    </script> -->

</body>

</html>