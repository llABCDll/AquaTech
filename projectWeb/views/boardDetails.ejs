<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Board Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="icon" type="image/x-icon" href="/pic/apple-touch-icon.png" />
    <link rel="stylesheet" href="/css/styleDetail.css" />
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
        integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"></script>
</head>

<body>
    <div class="container mt-4">
        <h1>Board Details</h1>
        <div class="backTo">
            <a href="/" class="btn btn-primary">Back to Dash Board</a>
        </div>
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <%= board.nameboard %>
                        <!-- ปุ่มเปิดโมดัลสำหรับการเปลี่ยนชื่อ -->
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                            data-bs-target="#changeNameModal">
                            <span class="bi bi-pencil"></span> Change Name
                        </button>
                </h5>
                <p class="card-text">
                    Token: <span id="tokenText">
                        <%= board.token %>
                    </span>
                    <button id="copyButton" type="button" class="btn btn-secondary btn-sm" onclick="copyToClipboard()">
                        <span class="bi bi-clipboard"></span> Copy
                    </button>
                </p>
                <!-- <p class="card-text">
                    Default Temp:
                    <% if (board.temp_default) { %>
                        <%= board.temp_default.min %> - <%= board.temp_default.max %> °C
                                <% } else { %>
                                    Not Set
                                    <% } %>
                </p> -->
                <p id="temp-display-<%= board.token %>">Current Temp: <%= board.new_temp %> °C</p>
                <p id="temp-display-<%= board.token %>">Temp: <%= board.temp %> °C</p>
                <p class="card-text">pH: <%= board.ph %>
                </p>
                <!-- Change Setting Button -->
                <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                    data-bs-target="#changeSettingModal">
                    Change Setting
                </button>

                <!-- Modal for Changing Name -->
                <div class="modal fade" id="changeNameModal" tabindex="-1" aria-labelledby="changeNameModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="changeNameModalLabel">Change Name</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                    aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="changeNameForm" action="/updateName" method="POST">
                                    <input type="hidden" name="token" value="<%= board.token %>">
                                    <div class="mb-3">
                                        <label for="name" class="form-label">New Name:</label>
                                        <input type="text" id="name" name="name" class="form-control"
                                            placeholder="<%= board.nameboard %>" required>
                                    </div>
                                    <button type="button" id="changeNameButton" class="btn btn-primary">Change
                                        Name</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal for Changing Settings -->
                <div class="modal fade" id="changeSettingModal" tabindex="-1" aria-labelledby="changeSettingModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="changeSettingModalLabel">Change Temperature Settings</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                    aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="changeSettingForm">
                                    <input type="hidden" name="token" value="<%= board.token %>">
                                    <div class="mb-3">
                                        <label for="temp" class="form-label">Temperature (°C)</label>
                                        <!-- แสดงอุณหภูมิปัจจุบันในฟิลด์อินพุต -->
                                        <input type="number" id="temp" name="temp" class="form-control"
                                            value="<%= board.new_temp %>" required>
                                    </div>
                                    <button type="submit" class="btn btn-primary">Save Changes</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Graph Area -->
                <div class="container mt-4">
                    <h2>Temperature Data</h2>
                    <p data-date>วันที่ของข้อมูลชุดนี้</p>
                    <canvas id="temperatureChart" width="50%" height="20px"></canvas>
                </div>
                <!-- Add pH Chart -->
                <div class="container mt-4">
                    <h2>pH Data</h2>
                    <p data-date>วันที่ของข้อมูลชุดนี้</p>
                    <canvas id="pHChart" width="50%" height="20px"></canvas>
                </div>
                <h2>Table Data</h2>
                <p data-date>วันที่ของข้อมูลชุดนี้</p>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Temp (°C)</th>
                            <th>pH</th>
                        </tr>
                    </thead>
                    <tbody id="data-table-body">
                        <!-- Data rows will be inserted here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- <script>
        document.getElementById('changeNameAndDefaultForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const formData = new FormData(this);
            const token = formData.get('token');
            const name = formData.get('name');
            const temp_default = formData.get('temp_default');

            fetch('/updateNameAndDefault', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ token, name, temp_default })
            })
                .then(response => {
                    if (response.ok) {
                        alert('Name and default updated successfully!');
                        const modal = bootstrap.Modal.getInstance(document.getElementById('changeSettingModal'));
                        modal.hide();  // ซ่อน modal หลังจากอัปเดตสำเร็จ
                    } else {
                        alert('Failed to update name and default');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to update name and default');
                });
        });
    </script> -->

    <script>
        document.getElementById('changeSettingForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const formData = new FormData(this);
            const token = formData.get('token');
            const temp = formData.get('temp');

            fetch('/updateTemp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ token, temp })
            })
                .then(response => {
                    if (response.ok) {
                        alert('Temperature update request sent successfully!');
                        const modal = bootstrap.Modal.getInstance(document.getElementById('changeSettingModal'));
                        modal.hide();  // ซ่อน modal หลังจากส่งคำขอสำเร็จ
                    } else {
                        alert('Failed to send update request');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to send update request');
                });
        });
    </script>
    
    <script>
        // การจัดการการคลิกปุ่มเปลี่ยนชื่อ
            changeNameButton.addEventListener('click', () => {
                const formData = new FormData(changeNameForm);

                fetch(changeNameForm.action, {
                    method: 'POST',
                    body: new URLSearchParams(formData),
                })
                .then(response => response.text())
                .then(result => {
                    alert(result);
                    // อัพเดตหน้าเพจหรือล้างฟอร์ม
                    changeNameForm.reset();
                    // ปิดโมดัล
                    bootstrap.Modal.getInstance(document.getElementById('changeNameModal')).hide();
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            });
    </script>

    <script>
        function copyToClipboard() {
            // คัดลอกข้อความจาก span ที่มี id เป็น tokenText
            const tokenText = document.getElementById('tokenText').innerText;
            const tempInput = document.createElement('input');
            tempInput.value = tokenText;
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand('copy');
            document.body.removeChild(tempInput);

            // แจ้งเตือนเมื่อคัดลอกสำเร็จ
            alert('Token copied to clipboard: ' + tokenText);
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {

            // กำหนด timestamp ปัจจุบันในเขตเวลาที่ต้องการ (เช่น Asia/Bangkok)
            const currentTimestamp = moment().tz('Asia/Bangkok').format('YYYY-MM-DD HH:mm:ss');
            console.log('Current Timestamp:', currentTimestamp);

            const token = '<%= board.token %>'; // ใช้ token ของบอร์ด

            fetch(`/getHourlyData?token=${token}`)
                .then(response => response.json())
                .then(data => {
                    if (data.length === 0) {
                        console.log('No data available');
                        return;
                    }

                    const yesterday = moment().subtract(1, 'days').startOf('day'); // เริ่มจากเวลา 00:00 ของวันก่อนหน้า
                    const filteredData = data.filter(entry => {
                        const entryDate = moment(entry.timestamp); // เปลี่ยน timestamp ของข้อมูลให้เป็น moment object
                        return entryDate.isSame(yesterday, 'day'); // ตรวจสอบว่า entryDate เป็นวันเดียวกันกับ yesterday
                    });


                    if (filteredData.length === 0) {
                        console.log('No data for yesterday');
                        return;
                    }

                    const labels = [];
                    const tempData = [];
                    const pHData = [];
                    const tableBody = document.getElementById('data-table-body');
                    tableBody.innerHTML = '';

                    // อัปเดตวันที่ของข้อมูล
                    const firstEntryDate = new Date(filteredData[0].timestamp);
                    const formattedDate = firstEntryDate.toLocaleDateString('th-TH', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });

                    document.querySelectorAll('p[data-date]').forEach(el => {
                        el.textContent = `วันที่ของข้อมูลชุดนี้: ${formattedDate}`;
                    });

                    filteredData.forEach(entry => {
                        const date = new Date(entry.timestamp);
                        labels.push(date.toLocaleString('th-TH', { hour: '2-digit', minute: '2-digit' }));
                        tempData.push(entry.temp);
                        pHData.push(entry.ph);

                        const newRow = document.createElement('tr');
                        newRow.innerHTML = `
                <td>${date.toLocaleDateString('th-TH')}</td>
                <td>${date.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}</td>
                <td>${entry.temp}</td>
                <td>${entry.ph}</td>
            `;
                        tableBody.appendChild(newRow);
                    });

                    // สร้างกราฟ
                    const ctxTemp = document.getElementById('temperatureChart').getContext('2d');
                    const ctxPH = document.getElementById('pHChart').getContext('2d');

                    new Chart(ctxTemp, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'Temperature (°C)',
                                data: tempData,
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 2,
                                fill: false
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });

                    new Chart(ctxPH, {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [{
                                label: 'pH Level',
                                data: pHData,
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 2,
                                fill: false
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching hourly data:', error);
                });
        });
    </script>

</body>

</html>